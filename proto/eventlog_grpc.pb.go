// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EventLogServiceClient is the client API for EventLogService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EventLogServiceClient interface {
	// FetchEvents streams back events to a caller
	FetchEvents(ctx context.Context, in *FetchEventsRequest, opts ...grpc.CallOption) (EventLogService_FetchEventsClient, error)
}

type eventLogServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEventLogServiceClient(cc grpc.ClientConnInterface) EventLogServiceClient {
	return &eventLogServiceClient{cc}
}

func (c *eventLogServiceClient) FetchEvents(ctx context.Context, in *FetchEventsRequest, opts ...grpc.CallOption) (EventLogService_FetchEventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &EventLogService_ServiceDesc.Streams[0], "/proto.EventLogService/FetchEvents", opts...)
	if err != nil {
		return nil, err
	}
	x := &eventLogServiceFetchEventsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EventLogService_FetchEventsClient interface {
	Recv() (*FetchEventsResponse, error)
	grpc.ClientStream
}

type eventLogServiceFetchEventsClient struct {
	grpc.ClientStream
}

func (x *eventLogServiceFetchEventsClient) Recv() (*FetchEventsResponse, error) {
	m := new(FetchEventsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EventLogServiceServer is the server API for EventLogService service.
// All implementations must embed UnimplementedEventLogServiceServer
// for forward compatibility
type EventLogServiceServer interface {
	// FetchEvents streams back events to a caller
	FetchEvents(*FetchEventsRequest, EventLogService_FetchEventsServer) error
	mustEmbedUnimplementedEventLogServiceServer()
}

// UnimplementedEventLogServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEventLogServiceServer struct {
}

func (UnimplementedEventLogServiceServer) FetchEvents(*FetchEventsRequest, EventLogService_FetchEventsServer) error {
	return status.Errorf(codes.Unimplemented, "method FetchEvents not implemented")
}
func (UnimplementedEventLogServiceServer) mustEmbedUnimplementedEventLogServiceServer() {}

// UnsafeEventLogServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EventLogServiceServer will
// result in compilation errors.
type UnsafeEventLogServiceServer interface {
	mustEmbedUnimplementedEventLogServiceServer()
}

func RegisterEventLogServiceServer(s grpc.ServiceRegistrar, srv EventLogServiceServer) {
	s.RegisterService(&EventLogService_ServiceDesc, srv)
}

func _EventLogService_FetchEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FetchEventsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EventLogServiceServer).FetchEvents(m, &eventLogServiceFetchEventsServer{stream})
}

type EventLogService_FetchEventsServer interface {
	Send(*FetchEventsResponse) error
	grpc.ServerStream
}

type eventLogServiceFetchEventsServer struct {
	grpc.ServerStream
}

func (x *eventLogServiceFetchEventsServer) Send(m *FetchEventsResponse) error {
	return x.ServerStream.SendMsg(m)
}

// EventLogService_ServiceDesc is the grpc.ServiceDesc for EventLogService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EventLogService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.EventLogService",
	HandlerType: (*EventLogServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FetchEvents",
			Handler:       _EventLogService_FetchEvents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "eventlog.proto",
}
