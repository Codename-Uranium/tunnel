/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface components {
  schemas: {
    /** Peer representation. */
    Peer: {
      /** Label of the peer. */
      label?: string | null;
      type?: components['schemas']['PeerType'];
      info_wireguard?: components['schemas']['PeerWireguard'];
      identifiers?: external['common.yaml']['components']['schemas']['ConnectionIdentifiers'];
      /** JWT information data. */
      claims?: string | null;
      /** Tunneling IPv4 address of a peer. */
      ipv4?: string | null;
      /** Peer expiration time. */
      expires?: string | null;
      /** The date when the peer was created. */
      created?: string;
      /** The date when the peer was updated last time. */
      updated?: string;
    };
    /** Wireguard-specific tunnel information. */
    PeerWireguard: {
      /** Wireguard public key. */
      public_key?: string;
    };
    /** Server-side configuration. */
    Settings: {
      /** Logging level. */
      log_level?: 'debug' | 'info' | 'warning' | 'error';
      /** Admin password (write-only, never returned). */
      admin_password?: string;
      /** Wireguard listening port. */
      wireguard_listen_port?: number;
      /** Wireguard keepalive interval. */
      wireguard_keepalive?: number;
      /** Wireguard subnet. */
      wireguard_subnet?: string;
      /** Public ipv4 address of a wireguard server. */
      wireguard_server_ipv4?: string;
      /** Public UDP port of a wireguard server. */
      wireguard_server_port?: number;
      /** Wireguard public key (read only). */
      wireguard_public_key?: string;
      ping_interval?: number;
      connection_timeout?: number;
      /** HTTP listening IP:Port pair. */
      http_listen_addr?: string;
      /** Array of DNS servers. */
      dns?: string[];
    };
    /** Connection information for wireguard peers. */
    ConnectInfoWireguard: {
      /** Server public key. */
      server_public_key: string;
      /** Public IPv4 of a wireguard server. */
      server_ipv4: string;
      /** Public wireguard port. */
      server_port: number;
      /** Client's tunnel IPv4 address. */
      tunnel_ipv4: string;
      /** Keepalive interval to be set on client side. */
      keepalive: number;
      /** Array of subnet, allowed to be sent to tunnel. */
      allowed_ips: string[];
      /** List of DNS servers. */
      dns: string[];
      ping_interval: number;
    };
    /** Peer tunnel type. */
    PeerType: 'wireguard';
    AdminAuthResponse: {
      /** JWT for accessing other administrative endpoints. */
      access_token: string;
    };
    /** Current operation status. */
    ServiceStatusResponse: {
      /** Indicate, whether service requires restart to apply latest settings. */
      restart_required: boolean;
    };
    /** Information to configure client on client side. */
    ClientConnectResponse: {
      info_wireguard?: components['schemas']['ConnectInfoWireguard'];
    };
    TrustedKey: string;
    PeerRecord: {
      id: number;
      peer: components['schemas']['Peer'];
    };
    TrustedKeyRecord: {
      id: string;
      key: components['schemas']['TrustedKey'];
    };
  };
  responses: {
    /** Example response */
    PeerInfo: {
      content: {
        'application/json': components['schemas']['Peer'];
      };
    };
    /** Example response */
    SettingsInfo: {
      content: {
        'application/json': components['schemas']['Settings'];
      };
    };
    /** Example response */
    TrustedKeyInfo: {
      content: {
        'text/plain': string;
      };
    };
  };
}

export interface operations {
  /** Get list of peers */
  'list-peers': {
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['PeerRecord'][];
        };
      };
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Internal Server Error */
      500: unknown;
    };
  };
  /** Create new peer */
  'add-peer': {
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['PeerRecord'];
        };
      };
      400: external['common.yaml']['components']['responses']['ResponseError'];
      401: external['common.yaml']['components']['responses']['ResponseError'];
      403: external['common.yaml']['components']['responses']['ResponseError'];
      409: external['common.yaml']['components']['responses']['ResponseError'];
      500: external['common.yaml']['components']['responses']['ResponseError'];
      507: external['common.yaml']['components']['responses']['ResponseError'];
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['Peer'];
      };
    };
  };
  /** Get peer information */
  'get-peer': {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: components['responses']['PeerInfo'];
      401: external['common.yaml']['components']['responses']['ResponseError'];
      403: external['common.yaml']['components']['responses']['ResponseError'];
      404: external['common.yaml']['components']['responses']['ResponseError'];
      500: external['common.yaml']['components']['responses']['ResponseError'];
    };
  };
  /** Update peer info */
  'change-peer': {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: components['responses']['PeerInfo'];
      400: external['common.yaml']['components']['responses']['ResponseError'];
      401: external['common.yaml']['components']['responses']['ResponseError'];
      403: external['common.yaml']['components']['responses']['ResponseError'];
      404: external['common.yaml']['components']['responses']['ResponseError'];
      409: external['common.yaml']['components']['responses']['ResponseError'];
      500: external['common.yaml']['components']['responses']['ResponseError'];
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['Peer'];
      };
    };
  };
  /** Delete peer */
  'delete-peer': {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: external['common.yaml']['components']['responses']['OperationSuccessful'];
      401: external['common.yaml']['components']['responses']['ResponseError'];
      403: external['common.yaml']['components']['responses']['ResponseError'];
      404: external['common.yaml']['components']['responses']['ResponseError'];
      500: external['common.yaml']['components']['responses']['ResponseError'];
    };
  };
  /** Get trusted key */
  'get-trusted': {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: components['responses']['TrustedKeyInfo'];
      401: external['common.yaml']['components']['responses']['ResponseError'];
      403: external['common.yaml']['components']['responses']['ResponseError'];
      404: external['common.yaml']['components']['responses']['ResponseError'];
      500: external['common.yaml']['components']['responses']['ResponseError'];
    };
  };
  /** Update trusted key */
  'change-trusted': {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: components['responses']['TrustedKeyInfo'];
      400: external['common.yaml']['components']['responses']['ResponseError'];
      401: external['common.yaml']['components']['responses']['ResponseError'];
      403: external['common.yaml']['components']['responses']['ResponseError'];
      404: external['common.yaml']['components']['responses']['ResponseError'];
      409: external['common.yaml']['components']['responses']['ResponseError'];
      500: external['common.yaml']['components']['responses']['ResponseError'];
    };
    requestBody: {
      content: {
        'text/plain': string;
      };
    };
  };
  /** Create new trusted key */
  'add-trusted': {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: components['responses']['TrustedKeyInfo'];
      400: external['common.yaml']['components']['responses']['ResponseError'];
      401: external['common.yaml']['components']['responses']['ResponseError'];
      403: external['common.yaml']['components']['responses']['ResponseError'];
      409: external['common.yaml']['components']['responses']['ResponseError'];
      500: external['common.yaml']['components']['responses']['ResponseError'];
      507: external['common.yaml']['components']['responses']['ResponseError'];
    };
    requestBody: {
      content: {
        'text/plain': string;
      };
    };
  };
  /** Delete trusted key */
  'delete-trusted': {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: external['common.yaml']['components']['responses']['OperationSuccessful'];
      401: external['common.yaml']['components']['responses']['ResponseError'];
      403: external['common.yaml']['components']['responses']['ResponseError'];
      404: external['common.yaml']['components']['responses']['ResponseError'];
      500: external['common.yaml']['components']['responses']['ResponseError'];
    };
  };
  /** Get current server settings */
  'get-settings': {
    parameters: {};
    responses: {
      200: components['responses']['SettingsInfo'];
      401: external['common.yaml']['components']['responses']['ResponseError'];
      403: external['common.yaml']['components']['responses']['ResponseError'];
      404: external['common.yaml']['components']['responses']['ResponseError'];
      500: external['common.yaml']['components']['responses']['ResponseError'];
    };
  };
  /** Update server settings */
  'set-settings': {
    parameters: {};
    responses: {
      200: components['responses']['SettingsInfo'];
      400: external['common.yaml']['components']['responses']['ResponseError'];
      401: external['common.yaml']['components']['responses']['ResponseError'];
      403: external['common.yaml']['components']['responses']['ResponseError'];
      500: external['common.yaml']['components']['responses']['ResponseError'];
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['Settings'];
      };
    };
  };
  /** Authorize administrator */
  'admin-auth': {
    parameters: {};
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['AdminAuthResponse'];
        };
      };
      401: external['common.yaml']['components']['responses']['ResponseError'];
      404: external['common.yaml']['components']['responses']['ResponseError'];
      500: external['common.yaml']['components']['responses']['ResponseError'];
    };
  };
  /** Reloads service with new configuration */
  reload: {
    parameters: {};
    responses: {
      200: external['common.yaml']['components']['responses']['OperationSuccessful'];
      401: external['common.yaml']['components']['responses']['ResponseError'];
      403: external['common.yaml']['components']['responses']['ResponseError'];
      500: external['common.yaml']['components']['responses']['ResponseError'];
    };
  };
  /** Returns current server status */
  'get-status': {
    parameters: {};
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['ServiceStatusResponse'];
        };
      };
      401: external['common.yaml']['components']['responses']['ResponseError'];
      403: external['common.yaml']['components']['responses']['ResponseError'];
      500: external['common.yaml']['components']['responses']['ResponseError'];
    };
  };
  /** Connect client peer */
  'client-connect': {
    parameters: {};
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['ClientConnectResponse'];
        };
      };
      400: external['common.yaml']['components']['responses']['ResponseError'];
      401: external['common.yaml']['components']['responses']['ResponseError'];
      403: external['common.yaml']['components']['responses']['ResponseError'];
      500: external['common.yaml']['components']['responses']['ResponseError'];
    };
    requestBody: {
      content: {
        'application/json': {
          type: components['schemas']['PeerType'];
          info_wireguard?: components['schemas']['PeerWireguard'];
          identifiers: external['common.yaml']['components']['schemas']['ConnectionIdentifiers'];
          location?: string;
        };
      };
    };
  };
  /** Disconnect client peer */
  'client-disconnect': {
    parameters: {};
    responses: {
      200: external['common.yaml']['components']['responses']['OperationSuccessful'];
      400: external['common.yaml']['components']['responses']['ResponseError'];
      401: external['common.yaml']['components']['responses']['ResponseError'];
      403: external['common.yaml']['components']['responses']['ResponseError'];
      500: external['common.yaml']['components']['responses']['ResponseError'];
    };
    requestBody: {
      content: {
        'application/json': external['common.yaml']['components']['schemas']['ConnectionIdentifiers'];
      };
    };
  };
  /** Update peer expiration time */
  'client-ping': {
    parameters: {};
    responses: {
      200: external['common.yaml']['components']['responses']['OperationSuccessful'];
      400: external['common.yaml']['components']['responses']['ResponseError'];
      401: external['common.yaml']['components']['responses']['ResponseError'];
      403: external['common.yaml']['components']['responses']['ResponseError'];
      500: external['common.yaml']['components']['responses']['ResponseError'];
    };
    requestBody: {
      content: {
        'application/json': external['common.yaml']['components']['schemas']['ConnectionIdentifiers'];
      };
    };
  };
  /** List trusted keys */
  'list-trusted': {
    parameters: {};
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['TrustedKeyRecord'][];
        };
      };
      401: external['common.yaml']['components']['responses']['ResponseError'];
      403: external['common.yaml']['components']['responses']['ResponseError'];
      500: external['common.yaml']['components']['responses']['ResponseError'];
    };
  };
}

export interface external {
  'common.yaml': {
    paths: {};
    components: {
      schemas: {
        ConnectionIdentifiers: {
          user_id?: string | null;
          installation_id?: string | null;
          session_id?: string | null;
        };
        /** Generic error response. */
        Error: {
          /** Machine-readable error code. */
          result: string;
          /** User-friendly error description. */
          error?: string;
          /** Message, which we can put to application logs. */
          details?: string;
          /** The name of field, caused error. */
          field?: string;
        };
      };
      responses: {
        /** Operation successful */
        OperationSuccessful: unknown;
        /** Example response */
        ResponseError: {
          content: {
            'application/json': external['common.yaml']['components']['schemas']['Error'];
          };
        };
      };
    };
    operations: {};
  };
}
